{"version":3,"sources":["types.js","reducers/appReducer.js","store.js","components/Pin.js","helpers/httpRequest.js","components/SearchIpInput.js","components/InfoIP.js","components/IconsTheme.js","components/Home.js","hooks/useForm.js","App.js","actions/appActions.js","index.js"],"names":["types","initialState","widthScreen","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","appReducer","state","action","type","payload","store","createStore","applyMiddleware","thunk","pinStyle","fill","stroke","Pin","props","size","height","viewBox","style","d","React","httpGetMyIP","a","fetch","then","response","json","data","result","httpSearchIP","ipAdress","SearchIpInput","clickGetMyIP","clickSearchIP","valueInput","changeInput","useSelector","handleClickMyIP","handleClickSearchIP","trim","length","className","flexDirection","onClick","name","value","onChange","autoComplete","margin","fontSize","display","marginRight","InfoIP","country","region","city","ip","IconsTheme","darkMode","clickLight","clickDark","Home","successLocation","setViewport","latitude","coords","longitude","width","zoom","setMarkerLocation","errorLocation","err","console","log","useEffect","navigator","geolocation","getCurrentPosition","enableHighAccuracy","useState","values","setValues","target","useForm","formValue","inputSearchIP","searchIP","viewport","markerLocation","setDarkMode","dataIP","status","Swal","fire","icon","title","text","lat","lon","query","mapStyle","mapboxApiAccessToken","process","maxZoom","onViewportChange","newViewport","App","Init","dispatch","useDispatch","handleResize","innerWidth","addEventListener","removeEventListener","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.49b74903.chunk.js","sourcesContent":["\r\nexport const types = {\r\n    resizeScreen: '[screen] resize'\r\n}","import { types } from \"../types\";\r\n\r\n\r\nconst initialState = {\r\n    widthScreen: 0\r\n}\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.resizeScreen:\r\n            return {\r\n                ...state,\r\n                widthScreen: action.payload\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import thunk from 'redux-thunk';\r\nimport { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport { appReducer } from './reducers/appReducer';\r\n\r\n\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nconst reducers = combineReducers({\r\n    appReducer: appReducer,\r\n});\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    composeEnhancers(\r\n        applyMiddleware(thunk)\r\n    )\r\n);","import * as React from 'react';\r\n\r\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\r\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\r\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\r\n\r\nconst pinStyle = {\r\n  fill: '#d00',\r\n  stroke: 'none'\r\n};\r\n\r\nfunction Pin(props) {\r\n  const {size = 20} = props;\r\n\r\n  return (\r\n    <svg height={size} viewBox=\"0 0 24 24\" style={pinStyle}>\r\n      <path d={ICON} />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default React.memo(Pin);","\r\nexport const httpGetMyIP = async () => {\r\n    \r\n    let result;\r\n    \r\n    await fetch('http://ip-api.com/json').then(async response =>{\r\n        const data = await response.json();\r\n\r\n        result = data;\r\n    });\r\n\r\n    return result;\r\n};\r\n\r\n\r\nexport const httpSearchIP = async (ipAdress) => {\r\n\r\n    let result;\r\n    \r\n    await fetch(`http://ip-api.com/json/${ipAdress}`)\r\n        .then(async response =>{\r\n            const data = await response.json();\r\n\r\n            result = data;\r\n        });\r\n\r\n    return result;\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const SearchIpInput = ({\r\n    clickGetMyIP, clickSearchIP,\r\n    valueInput, changeInput\r\n}) => {\r\n\r\n    const {widthScreen} = useSelector(state => state.appReducer);\r\n    \r\n    const handleClickMyIP = () => {\r\n        clickGetMyIP();\r\n    };\r\n\r\n    const handleClickSearchIP = () => {\r\n        if(valueInput.trim().length > 0){\r\n            clickSearchIP();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container-main-search\">\r\n            <h3>Buscar IP</h3>\r\n\r\n            <div \r\n                className=\"search-ip-container\"\r\n                style={{\r\n                    flexDirection: widthScreen < 1024 ?\r\n                        'column': ''\r\n                }}\r\n            >\r\n                {widthScreen > 1024 ? \r\n                    <button onClick={handleClickMyIP}>\r\n                        Obtener mi IP\r\n                    </button>\r\n                    :\r\n                    null\r\n                }\r\n\r\n                <input\r\n                    name=\"searchIP\"\r\n                    type=\"text\"\r\n                    value={valueInput}\r\n                    onChange={changeInput}\r\n                    autoComplete=\"off\"\r\n                    style={{\r\n                        margin: widthScreen < 1024 ? '0px' : '',\r\n                        fontSize: widthScreen < 1024 ? '1rem': ''\r\n                    }}\r\n                />\r\n\r\n                {widthScreen > 1024 ?\r\n                    <button onClick={handleClickSearchIP}>\r\n                        Buscar\r\n                    </button>\r\n                    :\r\n                    <div style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'row'\r\n                    }}>\r\n                        <button \r\n                            onClick={handleClickSearchIP}\r\n                            style={{\r\n                                marginRight: '30px'\r\n                            }}\r\n                        >\r\n                            Buscar\r\n                        </button>\r\n\r\n                        <button onClick={handleClickMyIP}>\r\n                            Mi IP\r\n                        </button>\r\n\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nexport const InfoIP = ({country, region, city, ip}) => {\r\n\r\n    const {widthScreen} = useSelector(state => state.appReducer);\r\n\r\n    return (\r\n        widthScreen > 1024 ? \r\n            <div className=\"info-ip-container\">\r\n                <h4>{`IP: ${ip}`}</h4>\r\n                <h4>{`Pais: ${country}`}</h4>\r\n                <h4>{`Estado: ${region}`}</h4>\r\n                <h4>{`Ciudad: ${city}`}</h4>\r\n            </div>\r\n            :\r\n            <div></div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { BsSun, BsMoon } from 'react-icons/bs';\r\n\r\n\r\nexport const IconsTheme = ({darkMode, clickLight, clickDark}) => {\r\n\r\n    const {widthScreen} = useSelector(state => state.appReducer);\r\n\r\n    return (\r\n        darkMode ?\r\n            <BsSun\r\n                size={widthScreen > 1024 ? \"2.5rem\" : '2rem'}\r\n                className=\"icon-sun\"\r\n                onClick={clickLight}\r\n            />\r\n            :\r\n            <BsMoon\r\n                className=\"icon-sun\"\r\n                size={widthScreen > 1024 ? \"2.5rem\" : '2rem'}\r\n                onClick={clickDark}\r\n            />\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport ReactMapGL, {Marker} from 'react-map-gl';\r\nimport Swal from 'sweetalert2';\r\nimport Pin from './Pin';\r\nimport { httpGetMyIP, httpSearchIP } from '../helpers/httpRequest';\r\nimport { useForm } from '../hooks/useForm';\r\nimport { SearchIpInput } from './SearchIpInput';\r\nimport { InfoIP } from './InfoIP';\r\nimport { IconsTheme } from './IconsTheme';\r\n\r\n\r\nexport const Home = () => {\r\n\r\n    const successLocation = (data) => {\r\n        setViewport({\r\n            latitude: data.coords.latitude,\r\n            longitude: data.coords.longitude,\r\n            width: '100vw',\r\n            height: '100vh',\r\n            zoom: 15\r\n        });\r\n\r\n        setMarkerLocation({\r\n            latitude: data.coords.latitude,\r\n            longitude: data.coords.longitude, \r\n        });\r\n    };\r\n\r\n    const errorLocation = (err) => {\r\n        console.log('error location');\r\n        console.log(err);\r\n    };\r\n\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(\r\n            successLocation,\r\n            errorLocation,\r\n            {enableHighAccuracy: true}\r\n        );\r\n\r\n    }, []);\r\n\r\n    const [formValue, changeInput] = useForm({\r\n        'searchIP': ''\r\n    });\r\n    const {searchIP: inputSearchIP} = formValue;\r\n\r\n    const [viewport, setViewport] = useState({\r\n        latitude: 52.6376,\r\n        longitude: -1.135171,\r\n        width: '100vw',\r\n        height: '100vh',\r\n        zoom: 15\r\n    });\r\n\r\n    const [markerLocation, setMarkerLocation] = useState({\r\n        latitude: 52.6376,\r\n        longitude: -1.135171,\r\n    });\r\n\r\n    const [darkMode, setDarkMode] = useState(true);\r\n\r\n    const clickGetMyIP = async () => {\r\n        const dataIP = await httpGetMyIP();\r\n\r\n        if(dataIP.status !== 'success'){\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'IP invalida',\r\n            });\r\n\r\n        } else {\r\n            setViewport({\r\n                latitude: dataIP.lat,\r\n                longitude: dataIP.lon,\r\n                width: '100vw',\r\n                height: '100vh',\r\n                zoom: 15\r\n            });\r\n            \r\n            setMarkerLocation({\r\n                latitude: dataIP.lat,\r\n                longitude: dataIP.lon,\r\n                country: dataIP.country,\r\n                region: dataIP.region,\r\n                city: dataIP.city,\r\n                ip: dataIP.query\r\n            });\r\n        }\r\n    };\r\n\r\n    const clickSearchIP = async () => {\r\n        const dataIP = await httpSearchIP(inputSearchIP);\r\n\r\n        if(dataIP.status !== 'success'){\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'IP invalida',\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        setViewport({\r\n            latitude: dataIP.lat,\r\n            longitude: dataIP.lon,\r\n            width: '100vw',\r\n            height: '100vh',\r\n            zoom: 15\r\n        });\r\n\r\n        setMarkerLocation({\r\n            latitude: dataIP.lat,\r\n            longitude: dataIP.lon,\r\n            country: dataIP.country,\r\n            region: dataIP.region,\r\n            city: dataIP.city,\r\n            ip: dataIP.query\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <SearchIpInput\r\n            clickGetMyIP={clickGetMyIP}\r\n            clickSearchIP={clickSearchIP}\r\n            valueInput={inputSearchIP}\r\n            changeInput={changeInput}\r\n        />\r\n\r\n        {markerLocation.country ?\r\n            <InfoIP\r\n                country={markerLocation.country}\r\n                region={markerLocation.region}\r\n                city={markerLocation.city}\r\n                ip={markerLocation.ip}\r\n            />\r\n            :\r\n            null\r\n        }\r\n\r\n        <ReactMapGL\r\n            {...viewport}\r\n            mapStyle={\r\n                darkMode ? \r\n                    \"mapbox://styles/mapbox/dark-v8\"\r\n                    :\r\n                    \"mapbox://styles/mapbox/light-v8\"\r\n            }\r\n            mapboxApiAccessToken={process.env.REACT_APP_TOKEN_MAP}\r\n            maxZoom={20}\r\n            onViewportChange={newViewport => {\r\n                setViewport({ ...newViewport });\r\n            }}\r\n        >\r\n            <Marker\r\n                latitude={markerLocation.latitude}\r\n                longitude={markerLocation.longitude}\r\n            >\r\n                <Pin size={30}/>\r\n            </Marker>\r\n        </ReactMapGL>\r\n\r\n\r\n        <IconsTheme \r\n            darkMode={darkMode}\r\n            clickDark={() => setDarkMode(true)}\r\n            clickLight={() => setDarkMode(false)}\r\n        />\r\n        </>\r\n    )\r\n}\r\n","import { useState } from 'react';\r\n\r\n\r\nexport const useForm = ( initialState = {} ) => {\r\n    \r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const reset = () => {\r\n        setValues( initialState );\r\n    }\r\n\r\n    const changeInput = ({ target }) => {\r\n        setValues({\r\n            ...values,\r\n            [ target.name ]: target.value\r\n        });\r\n    }\r\n\r\n    return [ values, changeInput, reset ];\r\n}","import React, { useEffect } from 'react';\nimport { Provider, useDispatch } from 'react-redux';\nimport { store } from './store';\nimport { Home } from './components/Home';\nimport { actionResizeWindow } from './actions/appActions';\n\n\nexport const App = () => {\n  return (\n    <Provider store={store}>\n      <Init/>\n    </Provider>\n  )\n}\n\n\nconst Init = () => {\n\n  const dispatch = useDispatch();\n\n  const handleResize = () => {\n    dispatch(actionResizeWindow());\n  }\n  \n  useEffect(() => {\n    \n    handleResize();\n    \n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);    \n    }\n  }, [handleResize]);\n\n  return (\n    <Home/>\n  )\n}","import { types } from \"../types\";\r\n\r\n\r\nexport const actionResizeWindow = () => ({\r\n    type: types.resizeScreen,\r\n    payload: window.innerWidth\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport app from './styles/app.css';\n\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}